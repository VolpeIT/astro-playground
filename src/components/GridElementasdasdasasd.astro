---
interface Props {
  imgs: string[];
  title: string;
  speakers: string[];
  info: string;
  date: string;
  soon: boolean;
  href: string;
  pill: string;
  color: string;
}

const {imgs, title, speakers, info, date, soon, href, pill, color} = Astro.props
const twoOrMoreImages = imgs.length > 1;
const stylesForOneImage = {maxWidth: `11rem`, objectFit: "cover"}
const stylesForTwoOrMoreImages = {width: "50%", objectFit: "contain", maxWidth: "180px", minWidth: "130px"}

// border-red-500 border-[1px] 
const articleStyles = `bg-white 
  grid grid-cols-2
  relative p-4

  rounded-lg
  transition-transform
  transform-gpu
  hover:shadow-cardHover 
  hover:translate-y-[-.25rem] 
  shadow-[0px_4px_10px_0px_rgba(0,0,0,0.2)]
`
const titleStyles = "text-white absolute left-1/2 -translate-x-1/2 -translate-y-1/2 rounded-xl px-2 py-0.5 text-xs"
---
<a href={href} class={articleStyles}>
  <span class={titleStyles} style={{backgroundColor: color}}>{pill}</span>
  <div class="col-span-2 flex justify-center">
  {imgs.map((img, i) => {
    if (i>1) return 
    const styles = twoOrMoreImages ? stylesForTwoOrMoreImages : stylesForOneImage
    const left = (twoOrMoreImages && i === 0) ? {transform: `translate(1rem)`} : {}
    const right = (twoOrMoreImages && i === 1) ? {transform: `translate(-1rem)`} : {}
    return <img 
      src={img} 
      class="place-self-center aspect-square p-0.5 border-2 border-blue-300 rounded-full bg-white" 
      style={{...styles, ...left, ...right}}
    />
  })}
  </div>
  <h5 class="col-span-2 font-semibold mb-2 text-balance">{title}</h5>
  <h6 class="col-span-2 text-violet-500 text-sm line-clamp-1">{speakers.join(" y ")}</h6>
  <p class="col-span-2 text-gray-500 text-sm mb-4 line-clamp-2 max-h-[2.4rem]">{info}</p>
  <span class="place-self-start col-start-1 font-semibold text-sm">{date}</span>
  <span class="place-self-end col-start-2 text-sm text-red-500">{soon && "Proximamente"}</span>
</a>

<style>
  a {
    grid-template-rows: 200px min-content min-content 1fr;
  }
</style>
